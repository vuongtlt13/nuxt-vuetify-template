<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="csrf-token" content="{{ csrf_token() }}">

    <title>{{ config('app.name') }}</title>

    <style>
        table > tbody > tr.selected_row {
            background-color: #2ee4ff !important;
        }
    </style>
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"
          integrity="sha512-iBBXm8fW90+nuLcSKlbmrPcLa0OT92xO1BIsZ+ywDWZCvqsWgccV3gFoRBv0z+8dLJgyAHIhR35VZc2oM/gI1w=="
          crossorigin="anonymous"/>

    <!-- Ionicons -->
    <link rel="stylesheet" href="https://code.ionicframework.com/ionicons/2.0.1/css/ionicons.min.css">
    <!-- Tempusdominus Bbootstrap 4 -->
    <link rel="stylesheet" href="/vendor/plugins/tempusdominus-bootstrap-4/css/tempusdominus-bootstrap-4.min.css">
    <!-- iCheck -->
    <link rel="stylesheet" href="/vendor/plugins/icheck-bootstrap/icheck-bootstrap.min.css">
    <!-- JQVMap -->
    <link rel="stylesheet" href="/vendor/plugins/jqvmap/jqvmap.min.css">
    <!-- Theme style -->
    <link rel="stylesheet" href="/vendor/dist/css/adminlte.min.css">
    <!-- overlayScrollbars -->
    <link rel="stylesheet" href="/vendor/plugins/overlayScrollbars/css/OverlayScrollbars.min.css">
    <!-- Daterange picker -->
    <link rel="stylesheet" href="/vendor/plugins/daterangepicker/daterangepicker.css">
    <!-- summernote -->
    <link rel="stylesheet" href="/vendor/plugins/summernote/summernote-bs4.css">
    <!-- Toastr -->
    <link rel="stylesheet" href="/vendor/plugins/toastr/toastr.min.css">
    <!-- Google Font: Source Sans Pro -->
    <link href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,400i,700" rel="stylesheet">
    <!-- Select2 -->
    <link rel="stylesheet" href="/vendor/plugins/select2/css/select2.min.css">
    <link rel="stylesheet" href="/vendor/plugins/select2-bootstrap4-theme/select2-bootstrap4.min.css">
    <script src="https://www.google.com/recaptcha/api.js" async defer></script>
    @stack('css')
</head>

<body class="sidebar-mini sidebar-closed" style="height: auto;">

<div class="modal-backdrop modal-dialog-centered" id="loading-modal" style="z-index: 9999; opacity: .5;justify-content: center;display: none">
    <div id="loader" style="text-align: center;" >
        <div class="spinner-border change-color" style="width: 8rem;height: 8rem;font-size: 2rem;"></div>
    </div>
</div>
<!-- /.modal -->

<div class="wrapper">
    <!-- Navbar -->
    @include('layouts.navbar')
    <!-- /.navbar -->

    <!-- Main Sidebar Container -->
    <aside class="main-sidebar sidebar-dark-primary elevation-4">
        <!-- Brand Logo -->
        <a href="#" class="brand-link">
            <img src="/vendor/dist/img/AdminLTELogo.png" alt="AdminLTE Logo" class="brand-image img-circle elevation-3"
                 style="opacity: .8">
            <span class="brand-text font-weight-light">AdminLTE 3</span>
        </a>

        <!-- Sidebar -->
        <div class="sidebar">
            <!-- Sidebar user panel (optional) -->
            <div class="user-panel mt-3 pb-3 mb-3 d-flex">
                <div class="image">
                    <img src="/vendor/dist/img/user2-160x160.jpg" class="img-circle elevation-2" alt="User Image">
                </div>
                <div class="info">
                    <a href="#" class="d-block">Alexander Pierce</a>
                </div>
            </div>

            <!-- Sidebar Menu -->
            <nav class="mt-2">
                <ul class="nav nav-pills nav-sidebar flex-column" data-widget="treeview" role="menu"
                    data-accordion="false">
                    @include('layouts.menu')
                </ul>
            </nav>
            <!-- /.sidebar-menu -->
        </div>
        <!-- /.sidebar -->
    </aside>

    <!-- Content Wrapper. Contains page content -->
    <div class="content-wrapper">
        <!-- Content Header (Page header) -->
        <div class="content-header">
            @yield('content-header')
        </div>
        <!-- /.content-header -->

        <!-- Main Content -->
        <section class="content">
            @yield('content')
        </section>
    </div>
    <!-- /.content-wrapper -->
</div>

<!-- jQuery -->
<script src="/vendor/plugins/jquery/jquery.min.js"></script>
<!-- jQuery UI 1.11.4 -->
<script src="/vendor/plugins/jquery-ui/jquery-ui.min.js"></script>
<!-- Resolve conflict in jQuery UI tooltip with Bootstrap tooltip -->
<script>
    $.ajaxSetup({
        headers: {
            'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
        }
    });
    $.widget.bridge('uibutton', $.ui.button)
</script>
<!-- Bootstrap 4 -->
<script src="/vendor/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>
<!-- ChartJS -->
<script src="/vendor/plugins/chart.js/Chart.min.js"></script>
<!-- Sparkline -->
<script src="/vendor/plugins/sparklines/sparkline.js"></script>
<!-- Sweet Alert -->
<script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>
<!-- JQVMap -->
<script src="/vendor/plugins/jqvmap/jquery.vmap.min.js"></script>
<script src="/vendor/plugins/jqvmap/maps/jquery.vmap.usa.js"></script>
<!-- jQuery Knob Chart -->
<script src="/vendor/plugins/jquery-knob/jquery.knob.min.js"></script>
<!-- daterangepicker -->
<script src="/vendor/plugins/moment/moment.min.js"></script>
<script src="/vendor/plugins/daterangepicker/daterangepicker.js"></script>
<!-- Tempusdominus Bootstrap 4 -->
<script src="/vendor/plugins/tempusdominus-bootstrap-4/js/tempusdominus-bootstrap-4.min.js"></script>
<!-- Summernote -->
<script src="/vendor/plugins/summernote/summernote-bs4.min.js"></script>
<!-- overlayScrollbars -->
<script src="/vendor/plugins/overlayScrollbars/js/jquery.overlayScrollbars.min.js"></script>
<!-- Select2 -->
<script src="/vendor/plugins/select2/js/select2.full.min.js"></script>

<!-- AdminLTE App -->
<script src="/vendor/dist/js/adminlte.js"></script>

<!-- Common -->
<script type="text/javascript">
    const defaultConfirmOptions = {
        mainText: "@lang("crud.are_you_sure")",
        detailText: "@lang("crud.confirm_delete_text")",
        cancel: "@lang("crud.cancel")",
        agree: "@lang("crud.agree")",
        icon: "warning",
    }
</script>
<script type="text/javascript">
    const BAD_PAYLOAD = 422;
    const UNAUTHENTICATED = 401;
    const FORBIDDEN = 403;

    String.prototype.format = function () {
        let i = 0, args = arguments;
        return this.replace(/%s/g, function () {
            return typeof args[i] != 'undefined' ? args[i++] : '';
        });
    };

    const parseNumber = (data, c = 2, d = ".", t = ",") => {
        return parseInt(String(data).split(t).join(''));
    };

    const formatNumber = (data, c = 2, d = ".", t = ",") => {
        return (data).toFixed(c).replace(/(\d)(?=(\d{3})+(?:\.\d+)?$)/g, "$1,");
    };

    const showNotificationFromResponse = (resp, time = 5000, successTitle = 'Thành công!', errorTitle = 'Thất bại!') => {
        if (resp.success) toastr.success(resp.message, successTitle, {timeOut: time})
        else toastr.error(resp.message, errorTitle, {timeOut: time});
    };

    const showNotificationFromError = (error, time = 5000, errorTitle = 'Có lỗi xảy ra!') => {
        let errorMessage = "";
        switch (error.status) {
            case BAD_PAYLOAD:
                errorMessage = error.message;
                errorTitle = 'Dữ liệu nhập vào không hợp lệ!';
                break;
            case FORBIDDEN:
                errorMessage = error.message;
                errorTitle = 'Không có quyền thực hiện!';
                break;
            default:
                let responseJson = error.responseJSON;
                errorMessage = (responseJson && responseJson.message) ? responseJson.message : error.responseText;
        }
        toastr.error(errorMessage, errorTitle, {timeOut: time});
        if (error.status === UNAUTHENTICATED) {
            setTimeout(() => {
                window.location.reload();
            }, 1000);
        }
    };

    const defaultOnBeforeSend = () => {
        $('#loading-modal').show();
    };

    const defaultOnCompleted = () => {
        $('#loading-modal').hide();
    };

    const defaultOnSuccess = (resp, table = null, modal = null) => {
        showNotificationFromResponse(resp);
        if (table) table.ajax.reload();
        if (modal) modal.modal('hide');
    };

    const defaultOnError = (error) => {
        showNotificationFromError(error);
    };

    const defaultAjaxOptions = {
        type: 'get',
        onBeforeSend: defaultOnBeforeSend,
        onSuccess: defaultOnSuccess,
        onError: defaultOnError,
        onCompleted: defaultOnCompleted,
        table: null,
        data: {},
        modal: null,
        defaultValues: {}
    };

    const mergeAjaxOptions = (options, defaultAjaxOptions) => {
        return {
            ...defaultAjaxOptions,
            ...options
        }
    };

    const sendAjax = (url, data, type = 'get', options = null) => {
        const ajaxOptions = {
            ...defaultAjaxOptions,
        }
        if (options === null) options = ajaxOptions;
        else options = mergeAjaxOptions(options, ajaxOptions);

        $.ajax({
            url: url,
            type: type,
            data: data,
            beforeSend: options.onBeforeSend,
            success: function (resp) {
                options.onSuccess(resp, options.table, options.modal);
            },
            error: options.onError,
            complete: options.onCompleted
        });
    };

    const sendFormAjax = (jQueryForm, options = null) => {
        const ajaxOptions = {
            ...defaultAjaxOptions,
            url: jQueryForm.attr('action'),
            type: jQueryForm.attr('method'),
        }
        if (options === null) options = ajaxOptions;
        else options = mergeAjaxOptions(options, ajaxOptions);

        jQueryForm.ajaxSubmit({
            url: options.url,
            type: options.type,
            dataType: 'json',
            beforeSubmit: function (arr, $form, opts) {
                _defaults = {...options.defaultValues};
                for (let value in arr) {
                    let key = arr[0].name;
                    delete _defaults[key];
                }

                for (let key in _defaults) {
                    let value = _defaults[key];
                    if (Array.isArray(value)) {
                        for (let i in value) {
                            arr.push({'name': key + "[]", 'value': value[i]})
                        }
                    } else {
                        arr.push({'name': key, 'value': value})
                    }
                }
            },
            beforeSend: options.onBeforeSend,
            data: options.data,
            success: function (resp) {
                options.onSuccess(resp, options.table, options.modal);
            },
            error: options.onError,
            complete: options.onCompleted
        });
    };

    const resetForm = (form) => {
        form.find('input').each(function (index, ele) {
            let jqueryObj = $(ele);
            let value = jqueryObj.data('defaultValue') !== null ? jqueryObj.data('defaultValue') : null;

            if ((!jqueryObj.hasClass('ignore-reset')) && (!jqueryObj.hasClass('no-reset')) && (jqueryObj.attr('type') !== 'checkbox')) jqueryObj.val(value);
        });

        form.find('textarea').each(function (index, ele) {
            let jqueryObj = $(ele);
            let value = jqueryObj.data('defaultValue') !== null ? jqueryObj.data('defaultValue') : null;

            if ((!jqueryObj.hasClass('ignore-reset')) && (!jqueryObj.hasClass('no-reset')) && (jqueryObj.attr('type') !== 'checkbox')) jqueryObj.val(value);
        });
        form.find('select').each(function (index, ele) {
            let jqueryObj = $(ele);
            let value = jqueryObj.data('defaultValue') !== null ? jqueryObj.data('defaultValue') : null;
            if ((!jqueryObj.hasClass('ignore-reset')) && (!jqueryObj.hasClass('no-reset'))) {
                jqueryObj.val(value);
                if (jqueryObj.hasClass('select2')) jqueryObj.trigger('change');
            }
        });
    };

    const getValueByAttr = (data, attrs) => {
        let res = null;
        attrs.map((attr) => {
            if (res === null) res = data[attr];
            else {
                if (res !== undefined) res = res[attr];
            }
        });
        return res;
    };

    const fillData = (form, data, htmlType, handler) => {
        form.find(htmlType).each(function (index, ele) {
            let jqueryObj = $(ele);
            if (jqueryObj[0].hasAttribute('data-column')) {
                let dataField = jqueryObj.attr('data-column');
                let attrs = dataField.split(".");
                let value = getValueByAttr(data, attrs);
                handler(jqueryObj, value);
            }
        });
    };

    const fillTextAreaFunc = (jqueryObj, value) => {
        if (jqueryObj.attr('data-role') === 'tagsinput') {
            jqueryObj.tagsinput('removeAll');
            jqueryObj.tagsinput('add', value);
        } else jqueryObj.val(value);
    };

    const fillInputFunc = (jqueryObj, value) => {
        if (jqueryObj.attr('data-role') === 'tagsinput') {
            jqueryObj.tagsinput('removeAll');
            jqueryObj.tagsinput('add', value);
        } else if (jqueryObj.attr('type') === 'checkbox') jqueryObj.prop('checked', value == 1);
        else jqueryObj.val(value);
    };

    const fillSelectFunc = (jqueryObj, value) => {
        jqueryObj.val(value);
        if (jqueryObj.hasClass('select2'))
            jqueryObj.trigger('change');
    };

    const fillEditForm = (data, form, key = "id") => {
        let templateAction = form.data('templateAction');
        form.attr('action', templateAction.format(data[key]));

        fillData(form, data, 'textarea', fillTextAreaFunc);
        fillData(form, data, 'input', fillInputFunc);
        fillData(form, data, 'select', fillSelectFunc);
    };

    const editRecord = (ele, editForm, key = "id") => {
        let table = $(ele).closest('table').DataTable();
        let row = $(ele).closest('tr');
        let data = table.row(row).data();
        fillEditForm(data, editForm, key);
        editForm.closest('div.modal').modal('show');
    };

    const confirmBox = async (options = {}) => {
        let finalOptions = {
            ...defaultConfirmOptions,
            ...options,
        }
        return await swal({
            title: finalOptions.mainText,
            text: finalOptions.detailText,
            icon: finalOptions.icon,
            buttons: [finalOptions.cancel, finalOptions.agree],
            dangerMode: true,
        });
    };

    const deleteRecord = async (ele, uri, isConfirm = true, options = {}) => {
        let defaultOptions = {
            key: 'id',
            additionalAttrs: {}
        }

        options = {
            ...defaultOptions,
            ...options
        }
        let isConfirmed = true;
        if (isConfirm) isConfirmed = await confirmBox(options);
        if (isConfirmed) {
            let table = $(ele).closest('table').DataTable();
            let row = $(ele).closest('tr');
            let dataRow = table.row(row).data();

            let key = options.key;
            delete options.key;
            let additionalAttrs = options.additionalAttrs;
            delete options.additionalAttrs;

            let data = {};
            for (let k in additionalAttrs) {
                data[k] = dataRow[additionalAttrs[k]];
            }
            let id = dataRow[key];

            sendAjax(
                uri.format(id),
                {
                    '_method': 'DELETE',
                    ...data
                },
                'post',
                {
                    ...options,
                    table: table,
                }
            )
        }
    };

    const fnRowCallBack = (ele, data, rowIndex, selectedRows) => {
        let row = $(ele);
        if ($.inArray(data.id, selectedRows) !== -1) {
            if (!row.hasClass('selected_row')) row.addClass('selected_row');
        } else {
            if (row.hasClass('selected_row')) row.removeClass('selected_row');
        }
    };

    const initDatatableEvent = (tableSelector, selectedRows) => {
        let table = $(tableSelector).DataTable();
        $(table.table().container()).removeClass('form-inline');

        $(tableSelector).on('click', 'tbody tr', function (evt) {
            if ($(evt.target).closest('button').hasClass('datatable-action')) return;

            let id = table.row(this).data().id;
            let index = $.inArray(id, selectedRows);
            $(this).toggleClass('selected_row');
            if ($(this).hasClass('selected_row')) {
                if (index === -1) selectedRows.push(id);
            } else {
                if (index !== -1) selectedRows.splice(index, 1);
            }
        });

        let wrapper = $(tableSelector).closest('div.dataTables_wrapper');
        let buttonColvis = wrapper.find('button.buttons-colvis');
        buttonColvis.on('click', function () {
            $('.dt-button-collection .buttons-columnVisibility').each(function(index, ele){
                let $a = $(ele), $cb = $a.find('input:checkbox');
                if ($cb.length === 0) {
                    $cb = $('<input>', {
                        type:'checkbox',
                        style:'margin:0 .25em 0 0; vertical-align:middle'
                    }).prop('checked', $(ele).hasClass('active') );
                    $a.prepend( $cb );
                }
            })

            $('.dt-button-collection a').on('click', function(evt){
                let $a = $(this), $cb = $a.find('input:checkbox');
                $cb.prop('checked', $a.hasClass('active'));
            });

            $('.dt-button-collection a input:checkbox').on('click', function(evt){
                evt.stopPropagation();
                let $cb = $(this), $a = $cb.closest('a');
                $a.trigger('click');
            });
        });
    };
</script>

<!-- Ajax Form -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.form/4.3.0/jquery.form.min.js"
        integrity="sha384-qlmct0AOBiA2VPZkMY3+2WqkHtIQ9lSdAsAn5RUJD/3vA5MKDgSGcdmIv4ycVxyn"
        crossorigin="anonymous"></script>
<!-- Toastr -->
<script src="/vendor/plugins/toastr/toastr.min.js"></script>

<script type="text/javascript">
    $(document).ready(function (evt) {
        $('.select2').select2({
            theme: 'bootstrap4'
        });

        setInterval(function() {
            $('.change-color')
                .animate( { color: 'red' }, 200)
                .animate( { color: 'pink' }, 200)
                .animate( { color: 'blue' }, 200)
                .animate( { color: 'cyan' }, 200)
                .animate( { color: 'green' }, 200)
                .animate( { color: 'orange' }, 200);
        }, 1100);
    });
</script>

@stack('scripts')
</body>
</html>
