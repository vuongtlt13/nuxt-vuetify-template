<template>
  <v-card
    elevation="2"
    rounded="lg"
    style="height: 100%;"
  >
    <BaseDataTable
      height="77vh"
      :datatable-handler="$MODEL_NAME_CAMEL$Datatable"
      :show-select="false"
      @dblclick:row="$MODEL_NAME_CAMEL$UpdateModal.showEditItemByDoubleClick"
      d-style="border-radius: inherit;"
      p-style=""
    >
      <template #top>
        <BaseToolbar
          :search.sync="$MODEL_NAME_CAMEL$Datatable.searchKeyword.value"
          :items-per-page.sync="$MODEL_NAME_CAMEL$Datatable.itemsPerPage.value"
          :select-all-fn="$MODEL_NAME_CAMEL$Datatable.selectAllItems"
          :handle-create-fn="$MODEL_NAME_CAMEL$CreateModal.showModalFn"
          :handle-refresh-fn="$MODEL_NAME_CAMEL$Datatable.clearSelectionAndReload"
          :handle-delete-fn="$MODEL_NAME_CAMEL$DeleteConfirm.showDeleteItemsConfirmFromDatatable"
        >
          <template #filters>
            <$MODEL_NAME$FilterAndAction
            />
          </template>
        </BaseToolbar>
      </template>
      <template #item.actions="{ item }">
        <v-icon
          small
          class="orange--text"
          @click.stop.prevent="$MODEL_NAME_CAMEL$UpdateModal.showEditItem(item)"
        >
          mdi-pencil
        </v-icon>
        <v-icon
          small
          class="red--text"
          @click.stop.prevent="$MODEL_NAME_CAMEL$DeleteConfirm.showDeleteItemConfirm(item)"
        >
          mdi-delete
        </v-icon>
      </template>
    </BaseDataTable>

    <!--    region create modal-->
    <BaseFormModal
      :is-show.sync="$MODEL_NAME_CAMEL$CreateModal.showDialog.value"
      :form-title="$t('crud.add_new_modal_title', { model: $t('models.$MODEL_NAME_CAMEL$.singular') })"
      :data="$MODEL_NAME_CAMEL$CreateModal.formData"
      :options="$MODEL_NAME_CAMEL$CreateModal.formOptions.value"
      :handle-submit="$MODEL_NAME_CAMEL$CreateModal.handleSubmitFn"
      :handle-cancel="$MODEL_NAME_CAMEL$CreateModal.resetFormDataFn"
    >
      <template #fields="{initData, options}">
        <$MODEL_NAME$Fields :init-data="initData" :options="options"/>
      </template>
    </BaseFormModal>
    <!--    endregion create modal-->

    <!--    region update modal-->
    <BaseFormModal
      :is-show.sync="$MODEL_NAME_CAMEL$UpdateModal.showDialog.value"
      :form-title="$t('crud.edit_modal_title', { model: $t('models.$MODEL_NAME_CAMEL$.singular') })"
      :data="$MODEL_NAME_CAMEL$UpdateModal.formData"
      :options="$MODEL_NAME_CAMEL$UpdateModal.formOptions.value"
      :handle-submit="$MODEL_NAME_CAMEL$UpdateModal.handleSubmitFn"
      :handle-cancel="$MODEL_NAME_CAMEL$UpdateModal.resetFormDataFn"
    >
      <template #fields="{initData, options}">
        <$MODEL_NAME$Fields :init-data="initData" :options="options"/>
      </template>
    </BaseFormModal>
    <!--    endregion update modal-->
  </v-card>
</template>

<script lang="ts">
import BaseDataTable from '~/components/base/DataTable.vue';
import BaseFormModal from '~/components/base/FormModal.vue';
import BaseToolbar from '~/components/base/Toolbar.vue';
import useDataTable from '~/composables/useDataTable';
import useFormModal from '~/composables/useFormModal';
import useFormModalWithKey from '~/composables/useFormModalWithKey';
import useConfirmDelete from '~/composables/useConfirmDelete';
import { defineComponent } from '@vue/composition-api'
import $MODEL_NAME_CAMEL$HeaderDataTable from '~/datatables/$MODEL_NAME_DASHED$/header'
import $MODEL_NAME$Service from '~/services/$MODEL_NAME_DASHED$'
import $MODEL_NAME$Fields from '~/components/$MODEL_NAME_DASHED$/Fields.vue';
import $MODEL_NAME$FilterAndAction from '~/components/$MODEL_NAME_DASHED$/FilterAndAction.vue';

export default defineComponent({
  components: {
    BaseDataTable,
    BaseFormModal,
    BaseToolbar,
    $MODEL_NAME$Fields,
    $MODEL_NAME$FilterAndAction,
  },
  layout: 'default',
  name: 'Page$MODEL_NAME$',
    meta: {
      rp: [
        "$MODEL_NAME_PLURAL_DASHED$.index"
      ]
    },
  computed: {
  },
  middleware: [
    'auth'
  ],
  setup () {
    // region $MODEL_NAME$

    // region datatable init
    const $MODEL_NAME_CAMEL$Datatable = useDataTable({
      fetchDataFunc: $MODEL_NAME$Service.fetch$MODEL_NAME$,
      headers: $MODEL_NAME_CAMEL$HeaderDataTable()
    })
    // endregion

    // region create modal
    const $MODEL_NAME_CAMEL$CreateModal = useFormModal({
      defaultData: {
        $DEFAULT_VALUES$
      },
      loadOptionFn: $MODEL_NAME$Service.loadCreate$MODEL_NAME$Option,
      handleSubmitFn: $MODEL_NAME$Service.addNew$MODEL_NAME$,
      successCallbackOption: {
        reloadTableFn: $MODEL_NAME_CAMEL$Datatable.clearSelectionAndReload,
      }
    })
    // endregion

    // region update modal
    const $MODEL_NAME_CAMEL$UpdateModal = useFormModalWithKey({
      loadOptionFn: $MODEL_NAME$Service.loadUpdate$MODEL_NAME$Option,
      handleSubmitFn: $MODEL_NAME$Service.update$MODEL_NAME$,
      successCallbackOption: {
        reloadTableFn: $MODEL_NAME_CAMEL$Datatable.clearSelectionAndReload,
      }
    })
    // endregion

    // region delete confirm
    const $MODEL_NAME_CAMEL$DeleteConfirm = useConfirmDelete({
      deleteRecordFn: $MODEL_NAME$Service.delete$MODEL_NAME$,
      deleteRecordsFn: $MODEL_NAME$Service.delete$MODEL_NAME_PLURAL$,
      selectedRows: $MODEL_NAME_CAMEL$Datatable.selectedRows,
      successCallbackOption: {
        reloadTableFn: $MODEL_NAME_CAMEL$Datatable.clearSelectionAndReload
      }
    })
    // endregion

    // endregion

    return {
      $MODEL_NAME_CAMEL$Datatable,
      $MODEL_NAME_CAMEL$CreateModal,
      $MODEL_NAME_CAMEL$UpdateModal,
      $MODEL_NAME_CAMEL$DeleteConfirm,
    }
  },
  data () {
    return {
      title: process.env.appName,
    }
  },
  head () {
    return { title: this.$t('models.$MODEL_NAME_CAMEL$.singular').toString() }
  },
  methods: {}
})
</script>

<style scoped>
</style>
